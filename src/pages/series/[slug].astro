---
import type { GetStaticPaths } from 'astro';
import Layout from "../../layouts/Layout.astro";
import BlogItem from "../../components/sections/blog/BlogItem.astro";
import { generateSeriesList, findSeriesBySlug } from "../../utils/series";
import { validateSlug } from "../../utils/slugify";
import { createPagination, parsePageFromUrl, createPageUrl, isValidPage } from "../../utils/pagination";
import { SERIES_CONSTANTS, type Series } from "../../types/series";

// 生成靜態路徑
export const getStaticPaths: GetStaticPaths = async () => {
  const seriesList = await generateSeriesList();
  
  return seriesList.map((series) => ({
    params: { 
      slug: series.slug 
    },
    props: { 
      series,
    }
  }));
};

// 取得路徑參數
const { slug } = Astro.params;
const { series } = Astro.props;

// 驗證 slug 有效性
if (!slug || typeof slug !== 'string' || !validateSlug(slug)) {
  return Astro.redirect('/404', 404);
}

// 如果 props 中沒有 series，嘗試動態查找
let currentSeries = series as Series;
if (!currentSeries) {
  currentSeries = await findSeriesBySlug(slug);
  if (!currentSeries) {
    return Astro.redirect('/404', 404);
  }
}

// 處理分頁
const currentPage = parsePageFromUrl(Astro.url);
const itemsPerPage = SERIES_CONSTANTS.DEFAULT_ITEMS_PER_PAGE;
const totalPages = Math.ceil(currentSeries.count / itemsPerPage);

// 驗證頁碼範圍
if (!isValidPage(currentPage, totalPages) && totalPages > 0) {
  return Astro.redirect(`/series/${slug}`, 302);
}

// 建立分頁資料
const paginatedData = createPagination(
  currentSeries.articles,
  currentPage,
  { 
    itemsPerPage,
    preGeneratePages: SERIES_CONSTANTS.DEFAULT_PREGENERATE_PAGES
  }
);

// 建立麵包屑導覽
const breadcrumb = [
  { text: '系列文章', url: '/series', active: false },
  { text: currentSeries.name, active: true }
];

// 建立分頁 URLs
const prevPageUrl = paginatedData.hasPrev 
  ? createPageUrl(`/series/${slug}`, currentPage - 1)
  : undefined;
const nextPageUrl = paginatedData.hasNext 
  ? createPageUrl(`/series/${slug}`, currentPage + 1)
  : undefined;

// 頁面標題
const pageTitle = `${currentSeries.name} - 系列文章`;
---

<Layout title={pageTitle}>
  <section class="py-8">
    <!-- 麵包屑導覽 -->
    <nav class="mb-6" aria-label="麵包屑導覽">
      <ol class="flex items-center text-sm text-offset">
        {breadcrumb.map((item, index) => (
          <li class="flex items-center">
            {index > 0 && <span class="mx-2 text-offset" aria-hidden="true">></span>}
            {item.url ? (
              <a 
                href={item.url} 
                class="hover:text-text transition-colors underline decoration-transparent hover:decoration-current"
              >
                {item.text}
              </a>
            ) : (
              <span class={item.active ? 'text-text font-medium' : 'text-offset'}>
                {item.text}
              </span>
            )}
          </li>
        ))}
      </ol>
    </nav>

    <!-- 系列標題與資訊 -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold mb-2">{currentSeries.name}</h1>
      <div class="flex items-center text-offset space-x-4">
        <span>共 {currentSeries.count} 篇文章</span>
        {totalPages > 1 && (
          <>
            <span>•</span>
            <span>第 {currentPage} / {totalPages} 頁</span>
          </>
        )}
      </div>
    </div>

    <!-- 文章清單 -->
    {paginatedData.items.length === 0 ? (
      <div class="text-center py-12">
        <p class="text-offset text-lg">此系列尚無文章。</p>
        <p class="text-offset text-sm mt-2">請稍後再回來查看更新。</p>
      </div>
    ) : (
      <div class="space-y-6 mb-8">
        {paginatedData.items.map((blog, index) => (
          <div class="blog-item">
            <BlogItem blog={blog} isFirst={index === 0 && currentPage === 1} />
          </div>
        ))}
      </div>
    )}

    <!-- 分頁導覽 -->
    {totalPages > 1 && (
      <nav class="flex justify-center items-center mt-12" aria-label="分頁導覽">
        <div class="flex items-center space-x-4">
          {prevPageUrl && (
            <a 
              href={prevPageUrl}
              class="px-4 py-2 border border-default rounded hover:bg-background-offset transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50"
              aria-label="前一頁"
            >
              ← 上一頁
            </a>
          )}
          
          <span class="text-offset px-2">
            第 {currentPage} 頁，共 {totalPages} 頁
          </span>
          
          {nextPageUrl && (
            <a 
              href={nextPageUrl}
              class="px-4 py-2 border border-default rounded hover:bg-background-offset transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50"
              aria-label="下一頁"
            >
              下一頁 →
            </a>
          )}
        </div>
      </nav>
    )}
  </section>
</Layout>

<style>
  .border-default { border-color: rgba(125, 125, 125, 0.2); }
  .bg-background-offset { background: rgba(125, 125, 125, 0.08); }
  .text-text { color: inherit; }
  .text-offset { opacity: 0.75; }
  .text-primary { color: var(--primary-color, #0066cc); }
  
  /* Focus ring styles */
  .focus\:ring-primary:focus {
    --tw-ring-color: var(--primary-color, #0066cc);
  }
  
  .focus\:ring-opacity-50:focus {
    --tw-ring-opacity: 0.5;
  }
  
  /* 響應式分頁 */
  @media (max-width: 640px) {
    nav[aria-label="分頁導覽"] .flex {
      flex-direction: column;
      gap: 0.75rem;
    }
    
    nav[aria-label="分頁導覽"] span {
      order: -1;
    }
  }
</style>