---
import Layout from "../layouts/Layout.astro";
import { getCollection } from 'astro:content';
import BlogItem from "../components/sections/blog/BlogItem.astro";

// 讀取所有 blogs，聚合出有 parent 的系列清單
const allBlogs = await getCollection('blogs');

type BlogEntry = typeof allBlogs[number];

// 過濾出有 parent 的文章
const withParent = allBlogs.filter(b => typeof b.data.parent === 'string' && b.data.parent?.trim());

// 依 parent 聚合
const seriesMap = new Map<string, BlogEntry[]>();
for (const entry of withParent) {
  const key = (entry.data.parent as string).trim();
  const list = seriesMap.get(key) ?? [];
  list.push(entry);
  seriesMap.set(key, list);
}

// 依系列名稱字母序排序系列
const seriesList = Array.from(seriesMap.entries())
  .sort(([a], [b]) => a.localeCompare(b, 'zh-TW'))
  .map(([name, entries]) => {
    // 系列內文章排序：seriesIndex 升冪（未定義者置後），其次 datetime 由早到晚（舊 → 新）
    const sorted = entries.slice().sort((a, b) => {
      const ai = Number.isFinite(a.data.seriesIndex as any) ? Number(a.data.seriesIndex) : Number.POSITIVE_INFINITY;
      const bi = Number.isFinite(b.data.seriesIndex as any) ? Number(b.data.seriesIndex) : Number.POSITIVE_INFINITY;
      if (ai !== bi) return ai - bi;
      // datetime 由早到晚（升冪）
      const at = new Date(a.data.datetime).getTime();
      const bt = new Date(b.data.datetime).getTime();
      return at - bt;
    });
    return { name, entries: sorted };
  });

// Phase 2 檢查：於開發時輸出聚合結果（名稱與數量）
console.log('[series] total series =', seriesList.length);
for (const s of seriesList) {
  console.log(` - ${s.name}: ${s.entries.length} 篇`);
}
---

<Layout title="系列文章">
  <section class="py-8">
    <h1 class="text-3xl font-bold mb-6">系列文章</h1>

    {seriesList.length === 0 && (
      <p class="text-offset">目前沒有任何系列文章。</p>
    )}

    <ul class="space-y-4">
      {seriesList.map((series, idx) => {
        const contentId = `series-panel-${idx}`;
        const buttonId = `series-button-${idx}`;
        return (
          <li class="border border-default rounded-lg bg-background">
            <div class="flex items-center justify-between p-4">
              <h2 id={`series-title-${idx}`} class="text-xl font-semibold text-text">
                {series.name}
              </h2>
              <span class="text-sm text-offset">{series.entries.length} 篇</span>
            </div>

            <div class="px-4 pb-4">
              <button
                id={buttonId}
                class="w-full text-left px-4 py-2 rounded-md border border-default hover:bg-background-offset focus:outline-none focus:ring"
                aria-controls={contentId}
                aria-expanded="false"
                aria-labelledby={`series-title-${idx}`}
                data-series-toggle
              >
                展開/收合文章清單
              </button>

              <div
                id={contentId}
                role="region"
                aria-labelledby={`series-title-${idx}`}
                hidden
                class="mt-3"
              >
                {series.entries.length === 0 ? (
                  <p class="text-offset">此系列尚無文章。</p>
                ) : (
                  <div class="space-y-4">
                    {series.entries.map((e, i) => (
                      <div class="blog-item">
                        <BlogItem blog={e} isFirst={i === 0} />
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </li>
        );
      })}
    </ul>
  </section>
</Layout>

<style>
  .border-default { border-color: rgba(125, 125, 125, 0.2); }
  .bg-background { background: transparent; }
  .text-text { color: inherit; }
  .text-offset { opacity: 0.75; }
  .hover\:bg-background-offset:hover { background: rgba(125, 125, 125, 0.08); }
</style>

<script>
  // 多卡片同時展開；使用 button + aria 屬性
  const toggles = document.querySelectorAll('[data-series-toggle]');
  toggles.forEach((btn) => {
    btn.addEventListener('click', () => toggle(btn));
    btn.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggle(btn);
      }
    });
  });

  function toggle(btn: Element) {
    const panelId = btn.getAttribute('aria-controls');
    if (!panelId) return;
    const panel = document.getElementById(panelId);
    if (!panel) return;
    const expanded = btn.getAttribute('aria-expanded') === 'true';
    btn.setAttribute('aria-expanded', String(!expanded));
    panel.hidden = expanded;
  }
</script>
