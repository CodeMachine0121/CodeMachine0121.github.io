---
const { id, title, achievements } = Astro.props;
---

<div id={id} class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby={`${id}-title`} role="dialog" aria-modal="true" hidden>
  <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:p-0">
    <!-- 背景遮罩层，带有淡入淡出动画 -->
    <div class="fixed inset-0 transition-opacity bg-black dark:bg-gray-900 bg-opacity-90 dark:bg-opacity-95" aria-hidden="true" data-backdrop></div>

    <!-- 模态框居中技巧 -->
    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

    <!-- 模态框内容 -->
    <div 
      class="modal-content inline-block w-full max-w-lg p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-background border border-default rounded-xl shadow-2xl sm:my-12 sm:p-8 scale-95 opacity-0"
      style="backdrop-filter: blur(0); -webkit-backdrop-filter: blur(0);"
      data-modal-container
    >
      <!-- 标题和关闭按钮 -->
      <div class="flex items-center justify-between mb-6">
        <h3 id={`${id}-title`} class="text-2xl font-bold text-text tracking-tight">
          <span class="text-primary">Achievements during</span>
          <span class="text-secondary">{title}</span>
        </h3>

      </div>

      <!-- 成就列表 -->
      <div class="max-h-[60vh] overflow-y-auto pr-2 custom-scrollbar">
        <ul class="space-y-3">
          {achievements && achievements.map((achievement: string) => (
            <li class="flex items-start gap-3 p-3 rounded-lg hover:bg-background-offset transition-colors duration-200">
               {achievement}
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>
</div>

<script>
  // 显示模态框的动画
  const showModal = (modal) => {
    if (!modal) return;

    // 移除隐藏类
    modal.removeAttribute('hidden');

    // 应用动画
    setTimeout(() => {
      const content = modal.querySelector('[data-modal-container]');
      if (content) {
        content.classList.remove('scale-95', 'opacity-0');
        content.classList.add('scale-100', 'opacity-100');
      }
    }, 10);

    // 添加键盘事件
    document.addEventListener('keydown', handleEscKey);

    // 锁定背景滚动
    document.body.style.overflow = 'hidden';
  };

  // 隐藏模态框的动画
  const hideModal = (modal) => {
    if (!modal) return;

    const content = modal.querySelector('[data-modal-container]');
    if (content) {
      content.classList.remove('scale-100', 'opacity-100');
      content.classList.add('scale-95', 'opacity-0');

      // 等待动画完成后隐藏模态框
      setTimeout(() => {
        modal.setAttribute('hidden', '');
        document.body.style.overflow = '';
      }, 200);
    } else {
      modal.setAttribute('hidden', '');
      document.body.style.overflow = '';
    }

    // 移除键盘事件
    document.removeEventListener('keydown', handleEscKey);
  };

  // 处理ESC键关闭模态框
  const handleEscKey = (e) => {
    if (e.key === 'Escape') {
      const modal = document.querySelector('[id^="modal-"]:not([hidden])');
      if (modal) hideModal(modal);
    }
  };

  // 点击打开模态框
  document.querySelectorAll('[data-modal-target]').forEach(item => {
    item.addEventListener('click', () => {
      const targetId = item.getAttribute('data-modal-target');
      if (targetId) {
        const modal = document.getElementById(targetId);
        if (modal) showModal(modal);
      }
    });
  });

  // 点击关闭按钮关闭模态框
  document.querySelectorAll('[data-close-button]').forEach(button => {
    button.addEventListener('click', () => {
      const modal = button.closest('[id^="modal-"]');
      if (modal) hideModal(modal);
    });
  });

  // 点击背景关闭模态框
  document.querySelectorAll('[data-backdrop]').forEach(backdrop => {
    backdrop.addEventListener('click', (e) => {
      if (e.target === backdrop) {
        const modal = backdrop.closest('[id^="modal-"]');
        if (modal) hideModal(modal);
      }
    });
  });
</script>

<style>
  /* 自定义滚动条样式 */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: var(--color-primary) transparent;
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: var(--color-primary);
    border-radius: 3px;
  }

  /* 平滑过渡效果 */
  .modal-content {
    transition: all 0.2s ease-out;
    background-color: var(--color-background);
    -webkit-backdrop-filter: none;
    backdrop-filter: none;
  }

  /* 确保背景不透明 */
  [id^="modal-"] .bg-background {
    background-color: var(--color-background) !important;
    opacity: 1 !important;
  }
</style>
